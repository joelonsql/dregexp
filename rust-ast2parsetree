#!/usr/local/bin/node
const { execSync } = require('child_process');
let DRegExp = require('./dregexp');
let fs = require('fs');
let rustc_ast_json = require('./rustc_ast_json');
let raj = new rustc_ast_json();
let sourceFile = process.argv[2];
let nodeType = process.argv[3];

if (sourceFile != null && !fs.existsSync(sourceFile)) {
    console.error('File does not exist: ' + sourceFile);
    return;
}

function getAST(sourceFile) {
    // The -Zast-json-noexpand option is only available for the "nightly" rust version.
    return JSON.parse(execSync('rustc -Zast-json-noexpand ' + sourceFile, {timeout: 1000, stdio: ['ignore', 'pipe', 'ignore']}));
}

function getParseTree(sourceCodeString, sourceFile) {
    let AST = getAST(sourceFile);
    let parseTree = raj.parse(AST, sourceCodeString);
    return parseTree;
}

function getTokens(sourceCodeString, sourceFile) {
    let AST = getAST(sourceFile);
    let tokens = raj.tokenize(AST, sourceCodeString);
    return tokens;
}

function printParseTree(parseTree) {
    let str = [];
    if (typeof(parseTree[1]) === 'string') {
        return [parseTree[1]];
    } else {
        for (let n of parseTree[1]) {
            str = str.concat(printParseTree(n));
        }
    }
    return str;
}

function showNodeTypeChildren(nodeType, parseTree) {
    if (parseTree[0] == nodeType) {
        if (typeof(parseTree[1]) === 'string') {
            console.log('"' + parseTree[1] + '"');
        } else {
            let children = [];
            for (let n of parseTree[1]) {
                children.push(n[0]);
            }
            console.log(children.join(' ') + ' : "' + printParseTree(parseTree).join(' ') + '"');
//            console.log(children.join(' '));
        }
    }
    if (typeof(parseTree[1]) === 'string') {
        return;
    }
    for (let n of parseTree[1]) {
        showNodeTypeChildren(nodeType, n);
    }
}

function eliminateRedudantNodes(parseTree) {
    // If a node has only one child that is of the same type
    // then the grand-child becomes the node's immediate child:
    // Example:
    // [
    //     "Ident",
    //     [
    //         [
    //             "Ident",
    //             "x"
    //         ]
    //     ]
    // ],
    // 
    // ...becomes:
    // 
    // [
    //     "Ident",
    //     "x"
    // ],
    if (typeof(parseTree[1]) === 'string') {
        return parseTree;
    } else {
        let subTree = [];
        for (let node of parseTree[1]) {
            if (Array.isArray(node[1]) && node[1].length == 1 && node[0] == node[1][0][0]) {
                subTree.push(eliminateRedudantNodes(node[1][0]));
            } else {
                subTree.push(eliminateRedudantNodes(node));
            }
        }
        return [parseTree[0], subTree];
    }
}

function compareParseTrees(parseTree1, parseTree2) {
    if (parseTree1[0] !== parseTree2[0]) {
        console.log('DIFF parseTree1[0] !== parseTree2[0] : ' + parseTree1[0] + ' !== ' + parseTree2[0]);
        return false;
    } else if (typeof(parseTree1[1]) === 'string'
            && typeof(parseTree2[1]) === 'string'
            && parseTree1[1] === parseTree2[1]
    ) {
        console.log('OK parseTree1[1] === parseTree2[1] : "' + parseTree1[1] + '" === "' + parseTree2[1] + '"');
        return true;
    } else if (Array.isArray(parseTree1[1]) && Array.isArray(parseTree2[1])) {
        // both parseTrees are arrays
        for (let i = 0; parseTree1[1][i] && parseTree2[1][i]; i++) {
            if (!compareParseTrees(parseTree1[1][i], parseTree2[1][i])) {
                return false;
            }
        }
        if (parseTree1[1].length !== parseTree2[1].length) {
            console.log('parseTree1[1].length !== parseTree2[1].length : ' + parseTree1[1].length + ' !== ' + parseTree2[1].length);
            return false;
        }
        return true;
    } else if (typeof(parseTree1[1]) === 'string' && Array.isArray(parseTree2[1])) {
        console.log('DIFF parseTree1 is string, parseTree2 is array');
        return false;
    } else if (typeof(parseTree2[1]) === 'string' && Array.isArray(parseTree1[1])) {
        console.log('DIFF parseTree2 is string, parseTree1 is array');
        return false;
    } else {
        throw new Error('ERROR Unexpected: parseTree1: ' + JSON.stringify(parseTree1) + ' parseTree2: ' + JSON.stringify(parseTree2));
    }
}

function unparseWithPaths(parseTree, path = [], tokens = []) {
    if (typeof(parseTree[1]) === 'string') {
        tokens.push([parseTree[0], parseTree[1], path]);
    } else {
        let nodeType = parseTree[0];
        path.unshift(nodeType);
        for (let node of parseTree[1]) {
            unparseWithPaths(node, path.slice(0), tokens);
        }
    }
    return tokens;
}

function compareAndFixParser(sourceCodeString, rustcParseTree, csvInputArrayOfHashes) {
    let drx = new DRegExp();
    drx.loadGrammarRules(csvInputArrayOfHashes);
    let dregexpTokens = drx.tokenize(sourceCodeString);
    let dregexpParseTree = drx.parse(dregexpTokens);
    let newCsvInputArrayOfHashes = [];
    console.log('rustcParseTree parseTree: ' + rustcParseTree.length + ' ' + JSON.stringify(rustcParseTree,null,4));
    console.log('dregexp parseTree: ' + dregexpParseTree.length + ' ' + JSON.stringify(dregexpParseTree,null,4));
    console.log('compareParseTrees: ' + compareParseTrees(rustcParseTree, dregexpParseTree));
    if (JSON.stringify(rustcParseTree) == JSON.stringify(dregexpParseTree)) {
        console.log('OK, ASTs are equal!');
    } else {
        console.log('Error, ASTs are different!');
    }
    newCsvInputArrayOfHashes = csvInputArrayOfHashes;
    let rustcParseTreeTokensWithPaths = unparseWithPaths(rustcParseTree);
    console.log('rustcParseTreeTokensWithPaths:' + JSON.stringify(rustcParseTreeTokensWithPaths,null,4));
    let dregexpParseTreeTokensWithPaths = unparseWithPaths(dregexpParseTree);
    console.log('dregexpParseTreeTokensWithPaths:' + JSON.stringify(dregexpParseTreeTokensWithPaths,null,4));
    return newCsvInputArrayOfHashes;
}

// Filename can be passed as argument,
// otherwise a http server is started
// and source code is passed as POST data
if (sourceFile != null) {
    let sourceCodeString = fs.readFileSync(sourceFile, 'utf8');
    let rustcParseTree = eliminateRedudantNodes(getParseTree(sourceCodeString, sourceFile));
    if (nodeType) {
//        console.log(printParseTree(parseTree).join(' '));
        showNodeTypeChildren(nodeType, rustcParseTree);
        process.exit(0);
    }
    console.log('rustcParseTree:' + JSON.stringify(rustcParseTree,null,4));
    // Since white space and comments are not in the rustc ast output,
    // they cannot be derived and must be hard-coded manually:
    let parser = rustcParseTree[0];
    let csvInputArrayOfHashes = [
        {
            parser: parser,
            nodetype: 'WS',
            tokenizepattern: '\\s+',
            parsepattern: '',
            primitivetype: '',
            nodegroup: '',
            precedence: '',
            subparser: '',
        },
        {
            parser: parser,
            nodetype: 'LineComment',
            tokenizepattern: '//.*',
            parsepattern: '',
            primitivetype: '',
            nodegroup: '',
            precedence: '',
            subparser: '',
        },
        {
            parser: parser,
            nodetype: 'BlockComment',
            tokenizepattern: '/\\*[\\s\\S]*?\\*/',
            parsepattern: '',
            primitivetype: '',
            nodegroup: '',
            precedence: '',
            subparser: '',
        },
    ];
//    let rustcTokens = getTokens(sourceCodeString, sourceFile);
//    console.log('rustc tokens: ' + rustcTokens.length + ' ' + JSON.stringify(rustcTokens,null,4));
    let drx = new DRegExp();
    csvInputArrayOfHashes = drx.deriveGrammar(sourceCodeString, rustcParseTree, csvInputArrayOfHashes);
    console.log(JSON.stringify(csvInputArrayOfHashes,null,4));
    csvInputArrayOfHashes = compareAndFixParser(sourceCodeString, rustcParseTree, csvInputArrayOfHashes);
    process.exit(0);
}

const http = require('http');
const hostname = '127.0.0.1';
const port = 3000;
const server = http.createServer((req, res) => {
    const chunks = [];
    req.on('data', chunk => chunks.push(chunk));
    req.on('end', () => {
        sourceCodeString = Buffer.concat(chunks).toString();
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Access-Control-Allow-Origin', '*');
        let sourceFile = '/tmp/input.rs';
        fs.writeFileSync(sourceFile, sourceCodeString);
        try {
            let output = JSON.stringify(eliminateRedudantNodes(getParseTree(sourceCodeString, sourceFile)),null,4);
            res.end(output);
            console.log(sourceCodeString.length + ' bytes read, ' + output.length + ' bytes written');
        }Â catch (e) {
            res.end('["Rust","Error"]');
            console.log('rustc failed');
        }
    })
});
server.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}/`);
});

